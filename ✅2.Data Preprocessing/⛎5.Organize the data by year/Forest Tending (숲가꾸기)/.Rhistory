cat("\n", crayon::green("Data processed successfully!"), "\n")
#### 🟩 파일 제거 옵션 ======================================================================
if (remove.files) {
for (year in names(all_selected_files)) {
year_path <- file.path(path_from, year)
files <- all_selected_files[[year]]
for (file in files) {
if (file != "해당 파일 없음") {
file_path <- file.path(year_path, file)
if (file.exists(file_path)) {
file.remove(file_path)
}
}
}
}
}
} else {
cat("\n", crayon::red("Data copy cancelled."), "\n")
}
}
}
# 🟧 모든 연도 합치는 함수 (최빈값 기준) ================================================================
process_and_export_most_frequent_value_rows <- function(path_to, output_file) {
# 지정된 경로에서 파일 리스트 가져오기
files <- list.files(path_to, full.names = TRUE)
# "연도.csv" 형태의 파일만 필터링
csv_files <- files[grepl("_[0-9]{4}\\.csv$", files)]
# 파일을 연도 순서대로 정렬
csv_files <- csv_files[order(as.numeric(gsub(".*_([0-9]{4})\\.csv$", "\\1", csv_files)))]
# 파일이 하나만 존재하는 경우 함수 실행 생략
if (length(csv_files) <= 1) {
cat("\n", crayon::red("파일이 하나만 존재하거나 없습니다. 함수 실행을 생략합니다."), "\n")
return(NULL)
}
# 각 파일을 읽고 Value_new의 최빈값 행만 추출
most_frequent_value_rows <- lapply(csv_files, function(file) {
df <- read_csv(file, show_col_types = FALSE)
# 최빈값 계산
most_frequent_value <- as.numeric(names(sort(table(df$Value_new), decreasing = TRUE)[1]))
most_frequent_rows <- df %>% filter(Value_new == most_frequent_value)
# Classification 열을 기준으로 가장 오래된 연도 선택
selected_row <- most_frequent_rows %>% arrange(Sub_Sub_Category) %>% slice(1)
# Sub_Sub_Category 열을 character로 변환
selected_row <- selected_row %>% mutate(Sub_Sub_Category = as.character(Sub_Sub_Category))
return(selected_row)
})
# 모든 추출한 행들을 하나의 데이터프레임으로 합치기
combined_df <- bind_rows(most_frequent_value_rows)
# Sub_Sub_Category와 Value_new가 제대로 읽히도록 형 변환
combined_df <- combined_df %>%
mutate(Sub_Sub_Category = as.factor(Sub_Sub_Category), Value_new = as.numeric(Value_new))
# View(combined_df)
# 연도 순서 확인
years = combined_df$Sub_Sub_Category %>% gsub("까지", "", .) %>% as.numeric %>% sort
all_years_present <- all(diff(years) == 1)
first_year <- min(years)
last_year <- max(years)
if (all_years_present) {
output_file <- paste0(output_file, "_complete")
message <- sprintf("모든 연도가 1년 차이로 존재합니다. (%d년부터 %d년까지)", first_year, last_year)
} else {
output_file <- paste0(output_file, "_incomplete")
message <- sprintf("연도 사이에 누락된 연도가 있습니다. (%d년부터 %d년까지)", first_year, last_year)
}
# 지정한 파일 이름으로 데이터프레임 내보내기
write_csv(combined_df, file.path(path_to, paste0(output_file, ".csv")))
# ggplot을 이용한 timeseries plot 생성
p <- ggplot(combined_df, aes(x = Sub_Sub_Category, y = Value_new, group = 1)) +
geom_line(color = "blue") +
geom_point(color = "red") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white", color = "white"),
panel.background = element_rect(fill = "white", color = "white"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
labs(title = "Time Series of Value_new",
x = "Sub_Sub_Category",
y = "Value_new") +
scale_x_discrete(expand = c(0, 0))
# plot을 PNG 형식으로 저장
ggsave(filename = file.path(path_to, paste0(output_file, ".png")), plot = p, bg = "white", width = 10, height = 6)
# 메시지 출력
cat("\n", crayon::magenta(message), "\n")
}
## 🟧 경로의 추출할 항목들 확인 ====================================================================================================
# 함수 정의
extract_unique_categories <- function(path) {
# 지정된 경로에서 파일 리스트 가져오기 (재귀적으로 하위 폴더 포함)
files <- list.files(path, full.names = TRUE, recursive = TRUE)
# 파일 이름만 추출
file_names <- basename(files)
# "연도_"와 첫 번째 "___" 사이의 문자열 추출
categories <- str_extract(file_names, "(?<=^[0-9]{4}_)[^_]+")
# 중복 제거 후 반환
unique_categories <- unique(categories)
return(unique_categories)
}
## 🟧 csv 파일들 처리 ====================================================================================================
library(dplyr)
process_csv_files <- function(path, colnames, which_year) {
# 파일 리스트 불러오기
files <- list.files(path, pattern = "\\.csv$", full.names = TRUE)
# 결과를 저장할 리스트
results <- list()
for (file in files) {
# CSV 파일 읽기
data <- read.csv(file)
# 열 이름 확인
col_names <- colnames(data)
# 3번째 열의 값 추출
third_column <- data[[3]]
# 연도만 추출 (정규표현식 사용)
years <- third_column[grep("\\d{4}", third_column)]
# which_year에 해당하는 행 추출
rows_with_year <- data[grep(which_year, third_column), ]
# colnames 내 모든 문자열을 포함하는 열 찾기 (4번째 열부터 Categorized_L3_New 이전까지)
start_col <- 4
end_col <- which(col_names == "Categorized_L3_New") - 1
if (length(end_col) == 0) {
stop("Categorized_L3_New 열이 존재하지 않습니다.")
}
# colnames 내 모든 문자열을 포함하는 열 찾기
matching_cols <- col_names[start_col:end_col]
target_cols <- matching_cols[sapply(matching_cols, function(x) all(sapply(colnames, function(y) grepl(y, x))))]
if (length(target_cols) == 0) {
warning(paste("파일", file, "에서 모든 colnames에 해당하는 열을 찾지 못했습니다."))
next
}
# 결과 저장
results[[file]] <- list(
rows_with_year = rows_with_year,
target_cols = target_cols
)
}
return(results)
}
## 🟧 연도 합계 파일이 아닌 파일들 삭제 ====================================================================================================
delete_non_year_files <- function(directory) {
# 모든 csv 파일을 재귀적으로 찾기
files <- list.files(directory, pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
# 연도 또는 연도를 포함한 문자열을 판단하기 위한 정규 표현식
year_regex <- "^[0-9]{4}.*$"
# 파일 삭제 카운터
deleted_files <- 0
for (file in files) {
# 파일 이름에서 확장자 제거
file_name <- basename(file)
file_name <- sub("\\.csv$", "", file_name)
# 파일 이름을 "___"로 분할
parts <- unlist(strsplit(file_name, "___"))
# 두 번째 부분이 연도 또는 연도를 포함한 문자열인지 확인
if (length(parts) >= 2) {
second_part <- parts[2]
if (!grepl(year_regex, second_part)) {
# 연도 또는 연도를 포함한 문자열이 아니면 파일 삭제
file.remove(file)
deleted_files <- deleted_files + 1
cat("Deleted:", file, "\n")
}
}
}
cat("Total files deleted:", deleted_files, "\n")
}
## 🟧 연도별 내보내고 최빈값으로 합치기 ====================================================================================================
each_year_total_copy_data_by_year_by_max_value_rows = function(yb,
path_from,
path_to,
L3,
item,
years_regions = c(),
total_include.list,
total_exclude.list,
message = T,
remove.files = F){
# path_to = path_to_upper
if(length(years_regions) > 0){
for(k in seq_along(total_include.list)){
# k=1
# k=i=1
# i=26
tryCatch({
cat(crayon::blue("\nStarting outer loop with k = "), k, "\n")
for(i in seq_along(years_regions)){
cat(crayon::blue(k, i, "\n"))
tryCatch({
cat(crayon::blue("  Starting inner loop with k = "), k, " and i = ", i, "\n")
ith_year = years_regions[i]
# change
kth_include.list = lapply(total_include.list[[k]], function(x){ c(x, ith_year) })
kth_exclude.list = total_exclude.list[[k]]
kth_sub_category = names(total_include.list)[k]
kth_path_to = file.path(path_to, kth_sub_category) # path 설정
# function
ith_results = copy_data_by_year(yb,
path_from,
path_to = kth_path_to,
save_file_name = paste0(L3, "___", kth_sub_category, "___", ith_year),
include.list = kth_include.list,
exclude.list = kth_exclude.list,
message,
remove.files)
cat(crayon::blue("  Finished inner loop with k = "), k, " and i = ", i, "\n")
}, error = function(e) {
cat(crayon::red("Error in inner loop with k = "), k, " and i = ", i, ": ", e$message, "\n")
stop(e)
})
}
# remove.files=F
tryCatch({
# 각 추출된 연도별 데이터 합치기 (최빈값 기준)
process_and_export_most_frequent_value_rows(path_to = kth_path_to, output_file = paste0(L3, "___", kth_sub_category, "___Total"))
cat(crayon::green("Exporting is done: "), crayon::bgMagenta(paste0(L3, "_", kth_sub_category)), "\n")
}, error = function(e) {
cat(crayon::red("Error in process_and_export_most_frequent_value_rows with k = "), k, ": ", e$message, "\n")
stop(e)
})
cat(crayon::blue("Finished outer loop with k = "), k, "\n")
}, error = function(e) {
cat(crayon::red("Error in outer loop with k = "), k, " and last i = ", if (exists("i")) i else "not started", ": ", e$message, "\n")
stop(e)
})
}
}else{
for(k in seq_along(total_include.list)){
# k=1
# k=i=1
# i=26
tryCatch({
cat(crayon::blue("\nStarting outer loop with k = "), k, "\n")
tryCatch({
# change
kth_include.list = total_include.list[[k]]
kth_exclude.list = total_exclude.list[[k]]
kth_sub_category = names(total_include.list)[k]
# kth_path_to = file.path(path_to, kth_sub_category) # path 설정
# function
kth_results = copy_data_by_year(yb,
path_from,
path_to = path_to,
save_file_name = paste0(kth_sub_category),
include.list = kth_include.list,
exclude.list = kth_exclude.list,
message,
remove.files)
}, error = function(e) {
cat(crayon::red("Error in inner loop with k = "), k, " and i = ", i, ": ", e$message, "\n")
stop(e)
})
# remove.files=F
# tryCatch({
#   # 각 추출된 연도별 데이터 합치기 (최빈값 기준)
#   process_and_export_most_frequent_value_rows(path_to = kth_path_to, output_file = paste0(L3, "___", kth_sub_category, "___Total"))
#
#   cat(crayon::green("Exporting is done: "), crayon::bgMagenta(paste0(L3, "_", kth_sub_category)), "\n")
# }, error = function(e) {
#   cat(crayon::red("Error in process_and_export_most_frequent_value_rows with k = "), k, ": ", e$message, "\n")
#   stop(e)
# })
cat(crayon::blue("Finished outer loop with k = "), k, "\n")
}, error = function(e) {
cat(crayon::red("Error in outer loop with k = "), k, " and last i = ", if (exists("i")) i else "not started", ": ", e$message, "\n")
stop(e)
})
}
}
}
# message=F
## 🟧 리스트 2개 비교 =============================================================
# 두 개의 리스트를 비교하여 길이와 원소 이름이 동일한지 확인하는 함수
# 두 개의 리스트를 비교하여 길이와 원소 이름이 동일한지 확인하는 함수
library(crayon)
# 두 개의 리스트를 비교하여 길이와 원소 이름이 동일한지 확인하는 함수
compare_lists <- function(list1, list2) {
# 두 리스트의 길이 비교
if (length(list1) != length(list2)) {
cat(red("The lists have different lengths.\n"))
return(FALSE)
}
# 두 리스트의 원소 이름 비교
names1 <- names(list1)
names2 <- names(list2)
if (is.null(names1) || is.null(names2)) {
cat(red("One or both of the lists do not have names.\n"))
return(FALSE)
}
if (!all(names1 == names2)) {
cat(red("The lists have different names.\n"))
return(FALSE)
}
cat(green("The lists have the same length and names.\n"))
return(TRUE)
}
## 🟧 csv 파일 필 ========================================================================
get_filtered_csv_files <- function(path, include = NULL, exclude = NULL) {
# Load necessary library
library(stringr)
# List all CSV files recursively
all_files <- list.files(path, pattern = "\\.csv$", recursive = TRUE, full.names = FALSE)
# Extract the specific part of the file name
extract_name_part <- function(filename) {
parts <- str_split(filename, "___")[[1]]
if (length(parts) >= 2) {
return(paste(parts[1], parts[2], sep = "___"))
} else {
return(NA)
}
}
extracted_names <- sapply(all_files, extract_name_part)
valid_files <- !is.na(extracted_names)
extracted_names <- extracted_names[valid_files]
all_files <- all_files[valid_files]
# Filter based on include criteria (all strings in include must be present)
if (!is.null(include)) {
include_indices <- sapply(include, function(inc) grepl(inc, extracted_names))
include_indices <- apply(include_indices, 1, all)
} else {
include_indices <- rep(TRUE, length(extracted_names))
}
# Filter based on exclude criteria (any string in exclude must not be present)
if (!is.null(exclude)) {
exclude_indices <- sapply(exclude, function(exc) grepl(exc, extracted_names))
exclude_indices <- apply(exclude_indices, 1, any)
} else {
exclude_indices <- rep(FALSE, length(extracted_names))
}
final_indices <- include_indices & !exclude_indices
filtered_files <- all_files[final_indices]
# Return only the names of the filtered files
return(basename(filtered_files))
}
# 🟥 데이터 로드 =================================================================
path_data = "/Users/Ido/Documents/GitHub/KFS_Timeseries_Data/4.Exported Data_by ID_2/숲가꾸기/숲 가꾸기Forest tending"
data.list = lapply(list.files(path_data, full.names=T, pattern = "\\.csv$"), read.csv) %>%
setNames(list.files(path_data, pattern = "\\.csv$"))
# 🟨 3번째 열이름을 구분으로 통일 =================================================================
library(purrr)
# 각 데이터 프레임의 3번째 열 이름 추출
third_column_names <- map(data.list, function(df) {
if (ncol(df) >= 3) {
return(names(df)[3])
} else {
return(NA) # 3번째 열이 없는 경우 NA 반환
}
})
# 결과 확인
print(third_column_names)
# 각 데이터 프레임의 3번째 열 이름을 "구분"으로 변경
data.list <- map(data.list, function(df) {
if (ncol(df) >= 3) {
colnames(df)[3] <- "Classification"
}
return(df)
})
# 결과 확인: 각 데이터 프레임의 열 이름
print(map(data.list, names))
# 🟦 데이터 합치기=================================================================================
data_combined = bind_rows(data.list)
View(data_combined)
# 🟦 연도 행만 추출====================================================================================
data_combined_2 = filter_by_year(data_combined)
View(data_combined_2)
data_combined_2$Classification %>% unique
# 🟧 열 합치기====================================================================================
data_combined_2 %>% names
## 🟨 구분 =========================================================================================
data_combined_2$구분 = NULL
## 🟨 "계"  =========================================================================================
# 옮기기
data_combined_2 = data_combined_2 %>%
relocate(contains("계"), .after = last_col())
names(data_combined_2)
# 삭제
data_combined_3 = data_combined_2 %>%
select(-contains("계"))
names(data_combined_3)
## 🟨 풀베기  =========================================================================================
data_combined_4 = combine_columns_by_keywords(data_combined_3, target_strings = "풀베기",  new_column_name = "풀베기_new")
View(data_combined_4)
## 🟨 덩굴제거  =========================================================================================
data_combined_5 = combine_columns_by_keywords(data_combined_4, target_strings = "덩굴", new_column_name = "덩굴제거_new")
names(data_combined_5)
## 🟨 기타  =========================================================================================
grep("기타", names(data_combined_5), value = T)
data_combined_6 = combine_columns_by_keywords(data_combined_5, target_strings = "기타", new_column_name = "기타_new")
names(data_combined_6)
## 🟨 천연림보육 =========================================================================================
grep("천연림보육", names(data_combined_6), value = T)
data_combined_7 = combine_columns_by_keywords(data_combined_6, target_strings = "천연림보육", new_column_name = "천연림보육_new")
## 🟨 공익림가꾸기 =========================================================================================
data_old = data_combined_7
key = "공익림가꾸기"
grep(key, names(data_old), value = T)
data_combined_8 = combine_columns_by_keywords(data_old, target_strings = key, new_column_name = paste0(key, "_new"))
## 🟨 간벌 =========================================================================================
data_old = data_combined_8
names(data_old)
key = "간벌"
grep(key, names(data_old), value = T)
data_combined_9 = combine_columns_by_keywords(data_old, target_strings = key, new_column_name = paste0(key, "_new"))
## 🟨 경제림 솎아베기 =========================================================================================
data_old = data_combined_9
names(data_old)
key = c("경제림", "솎아베기")
col_name = "솎아베기_경제림"
multi_grep(key, data_old)
data_combined_10 = combine_columns_by_keywords(data_old, target_strings = key, new_column_name = paste0(col_name, "_new"))
## 🟨 어린나무가꾸기 =========================================================================================
data_old = data_combined_10
names(data_old)
key = c("어린나무", "가꾸기")
col_name = "어린나무가꾸기"
multi_grep(key, data_old)
data_combined_11 = combine_columns_by_keywords(data_old, target_strings = key, new_column_name = paste0(col_name, "_new"))
## 🟨 덩굴제거 만경류 =========================================================================================
data_old = data_combined_11
names(data_old)
# key = c("어린나무", "가꾸기")
# col_name = "어린나무가꾸기"
# multi_grep(key, data_old)
data_combined_12 = combine_columns_by_keywords(data_old, target_columns = c("만경류제거", "덩굴제거_new"), new_column_name = "덩굴제거")
## 🟨 보식 메워심기 =========================================================================================
data_old = data_combined_12
names(data_old)
# key = c("어린나무", "가꾸기")
# col_name = "어린나무가꾸기"
# multi_grep(key, data_old)
data_combined_13 = combine_columns_by_keywords(data_old, target_columns = c("보식", "메워심기"), new_column_name = "메워심기_new")
## 🟨 비배 비료주기 =========================================================================================
data_old = data_combined_13
names(data_old)
# key = c("어린나무", "가꾸기")
# col_name = "어린나무가꾸기"
# multi_grep(key, data_old)
data_combined_14 = combine_columns_by_keywords(data_old, target_columns = c("비배", "비료주기"), new_column_name = "비료주기_new")
## 🟨 솎아베기 , 간벌 =========================================================================================
data_old = data_combined_14
names(data_old)
# key = c("어린나무", "가꾸기")
# col_name = "어린나무가꾸기"
# multi_grep(key, data_old)
data_combined_15 = combine_columns_by_keywords(data_old, target_columns = c("숲가꾸기_솎아베기", "솎아베기", "간벌_new"), new_column_name = "솎아베기_new")
data_combined_15 = data_combined_15 %>%
relocate(무육, .after = last_col()) %>%
relocate(year, .after = Classification)
names(data_combined_15)
# 🟩 데이터 추출 =====================================================================================
names(data_combined_15)
data.list = list()
## 🟪 풀베기 ================================================================================
k=1
col_name = "풀베기_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 천연림보육 ================================================================================
k=2
names(data_combined_15)
col_name = "천연림보육_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 공익림가꾸기 ================================================================================
k=3
names(data_combined_15)
col_name = "공익림가꾸기_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 솎아베기 경제림 ================================================================================
k=4
names(data_combined_15)
col_name = "솎아베기_경제림_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 어린나무가꾸기 ================================================================================
k=5
names(data_combined_15)
col_name = "어린나무가꾸기_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 덩굴제거 ================================================================================
k=6
names(data_combined_15)
col_name = "덩굴제거"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 메워심기 ================================================================================
k=7
names(data_combined_15)
col_name =  "메워심기_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 비료주기 ================================================================================
k=8
names(data_combined_15)
col_name =  "비료주기_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 솎아베기 ================================================================================
k=9
names(data_combined_15)
col_name =  "솎아베기_new"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
## 🟪 무육 ================================================================================
k=10
names(data_combined_15)
col_name =  "무육"
data.list[[k]] = select_columns_with_additional(data_combined_15, col_name) %>% unique_by_classification
names(data.list)[k] = col_name
data.list$풀베기_new %>% View
# 🟥 마지막 열 옮기기 ====================================================================================
data.list_2 = lapply(data.list, move_last_column_after_year)
data.list_2$풀베기_new
