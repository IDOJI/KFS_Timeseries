}
return(results)
}
## 🟧 연도 합계 파일이 아닌 파일들 삭제 ====================================================================================================
delete_non_year_files <- function(directory) {
# 모든 csv 파일을 재귀적으로 찾기
files <- list.files(directory, pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
# 연도 또는 연도를 포함한 문자열을 판단하기 위한 정규 표현식
year_regex <- "^[0-9]{4}.*$"
# 파일 삭제 카운터
deleted_files <- 0
for (file in files) {
# 파일 이름에서 확장자 제거
file_name <- basename(file)
file_name <- sub("\\.csv$", "", file_name)
# 파일 이름을 "___"로 분할
parts <- unlist(strsplit(file_name, "___"))
# 두 번째 부분이 연도 또는 연도를 포함한 문자열인지 확인
if (length(parts) >= 2) {
second_part <- parts[2]
if (!grepl(year_regex, second_part)) {
# 연도 또는 연도를 포함한 문자열이 아니면 파일 삭제
file.remove(file)
deleted_files <- deleted_files + 1
cat("Deleted:", file, "\n")
}
}
}
cat("Total files deleted:", deleted_files, "\n")
}
## 🟧 연도별 내보내고 최빈값으로 합치기 ====================================================================================================
each_year_total_copy_data_by_year_by_max_value_rows = function(yb,
path_from,
path_to,
L3,
item,
years_regions = c(),
total_include.list,
total_exclude.list,
message = T,
remove.files = F){
# path_to = path_to_upper
if(length(years_regions) > 0){
for(k in seq_along(total_include.list)){
# k=1
# k=i=1
# i=26
tryCatch({
cat(crayon::blue("\nStarting outer loop with k = "), k, "\n")
for(i in seq_along(years_regions)){
cat(crayon::blue(k, i, "\n"))
tryCatch({
cat(crayon::blue("  Starting inner loop with k = "), k, " and i = ", i, "\n")
ith_year = years_regions[i]
# change
kth_include.list = lapply(total_include.list[[k]], function(x){ c(x, ith_year) })
kth_exclude.list = total_exclude.list[[k]]
kth_sub_category = names(total_include.list)[k]
kth_path_to = file.path(path_to, kth_sub_category) # path 설정
# function
ith_results = copy_data_by_year(yb,
path_from,
path_to = kth_path_to,
save_file_name = paste0(L3, "___", kth_sub_category, "___", ith_year),
include.list = kth_include.list,
exclude.list = kth_exclude.list,
message,
remove.files)
cat(crayon::blue("  Finished inner loop with k = "), k, " and i = ", i, "\n")
}, error = function(e) {
cat(crayon::red("Error in inner loop with k = "), k, " and i = ", i, ": ", e$message, "\n")
stop(e)
})
}
# remove.files=F
tryCatch({
# 각 추출된 연도별 데이터 합치기 (최빈값 기준)
process_and_export_most_frequent_value_rows(path_to = kth_path_to, output_file = paste0(L3, "___", kth_sub_category, "___Total"))
cat(crayon::green("Exporting is done: "), crayon::bgMagenta(paste0(L3, "_", kth_sub_category)), "\n")
}, error = function(e) {
cat(crayon::red("Error in process_and_export_most_frequent_value_rows with k = "), k, ": ", e$message, "\n")
stop(e)
})
cat(crayon::blue("Finished outer loop with k = "), k, "\n")
}, error = function(e) {
cat(crayon::red("Error in outer loop with k = "), k, " and last i = ", if (exists("i")) i else "not started", ": ", e$message, "\n")
stop(e)
})
}
}else{
for(k in seq_along(total_include.list)){
# k=1
# k=i=1
# i=26
tryCatch({
cat(crayon::blue("\nStarting outer loop with k = "), k, "\n")
tryCatch({
# change
kth_include.list = total_include.list[[k]]
kth_exclude.list = total_exclude.list[[k]]
kth_sub_category = names(total_include.list)[k]
# kth_path_to = file.path(path_to, kth_sub_category) # path 설정
# function
kth_results = copy_data_by_year(yb,
path_from,
path_to = path_to,
save_file_name = paste0(kth_sub_category),
include.list = kth_include.list,
exclude.list = kth_exclude.list,
message,
remove.files)
}, error = function(e) {
cat(crayon::red("Error in inner loop with k = "), k, " and i = ", i, ": ", e$message, "\n")
stop(e)
})
# remove.files=F
# tryCatch({
#   # 각 추출된 연도별 데이터 합치기 (최빈값 기준)
#   process_and_export_most_frequent_value_rows(path_to = kth_path_to, output_file = paste0(L3, "___", kth_sub_category, "___Total"))
#
#   cat(crayon::green("Exporting is done: "), crayon::bgMagenta(paste0(L3, "_", kth_sub_category)), "\n")
# }, error = function(e) {
#   cat(crayon::red("Error in process_and_export_most_frequent_value_rows with k = "), k, ": ", e$message, "\n")
#   stop(e)
# })
cat(crayon::blue("Finished outer loop with k = "), k, "\n")
}, error = function(e) {
cat(crayon::red("Error in outer loop with k = "), k, " and last i = ", if (exists("i")) i else "not started", ": ", e$message, "\n")
stop(e)
})
}
}
}
# message=F
## 🟧 리스트 2개 비교 =============================================================
# 두 개의 리스트를 비교하여 길이와 원소 이름이 동일한지 확인하는 함수
# 두 개의 리스트를 비교하여 길이와 원소 이름이 동일한지 확인하는 함수
library(crayon)
# 두 개의 리스트를 비교하여 길이와 원소 이름이 동일한지 확인하는 함수
compare_lists <- function(list1, list2) {
# 두 리스트의 길이 비교
if (length(list1) != length(list2)) {
cat(red("The lists have different lengths.\n"))
return(FALSE)
}
# 두 리스트의 원소 이름 비교
names1 <- names(list1)
names2 <- names(list2)
if (is.null(names1) || is.null(names2)) {
cat(red("One or both of the lists do not have names.\n"))
return(FALSE)
}
if (!all(names1 == names2)) {
cat(red("The lists have different names.\n"))
return(FALSE)
}
cat(green("The lists have the same length and names.\n"))
return(TRUE)
}
## 🟧 csv 파일 필 ========================================================================
get_filtered_csv_files <- function(path, include = NULL, exclude = NULL) {
# Load necessary library
library(stringr)
# List all CSV files recursively
all_files <- list.files(path, pattern = "\\.csv$", recursive = TRUE, full.names = FALSE)
# Extract the specific part of the file name
extract_name_part <- function(filename) {
parts <- str_split(filename, "___")[[1]]
if (length(parts) >= 2) {
return(paste(parts[1], parts[2], sep = "___"))
} else {
return(NA)
}
}
extracted_names <- sapply(all_files, extract_name_part)
valid_files <- !is.na(extracted_names)
extracted_names <- extracted_names[valid_files]
all_files <- all_files[valid_files]
# Filter based on include criteria (all strings in include must be present)
if (!is.null(include)) {
include_indices <- sapply(include, function(inc) grepl(inc, extracted_names))
include_indices <- apply(include_indices, 1, all)
} else {
include_indices <- rep(TRUE, length(extracted_names))
}
# Filter based on exclude criteria (any string in exclude must not be present)
if (!is.null(exclude)) {
exclude_indices <- sapply(exclude, function(exc) grepl(exc, extracted_names))
exclude_indices <- apply(exclude_indices, 1, any)
} else {
exclude_indices <- rep(FALSE, length(extracted_names))
}
final_indices <- include_indices & !exclude_indices
filtered_files <- all_files[final_indices]
# Return only the names of the filtered files
return(basename(filtered_files))
}
# 🟥 데이터 로드 ==================================================================================
path_2020 = "/Users/Ido/Documents/GitHub/KFS_Timeseries_Data/5.디지털숲가꾸기/Exported_2/comparison 2020.csv"
path_2021 = "/Users/Ido/Documents/GitHub/KFS_Timeseries_Data/5.디지털숲가꾸기/Exported_2/comparison 2021.csv"
data_2020 = read.csv(path_2020)
data_2021 = read.csv(path_2021)
# 🟨 데이터 합치기 ==================================================================================
names(data_2020)
names(data_2021)
data_2020$year
data_combined = rbind(data_2020, data_2021)
View(data_combined)
# 🟨 어린나무 가꾸기, 큰나무 가꾸기만 남기기==================================================================================
data_combined_2 = data_combined %>% filter(forest_tending %in% c("어린나무가꾸기", "큰나무가꾸기"))
data_combined_2
# 🟩 Bland-Altman test ==================================================================================
install.packages("devtools")
devtools::install_github("deepankardatta/blandr")
install.packages("devtools")
require(blandr)
# Perform Bland-Altman analysis and display the statistics
blandr.statistics(measurement1, measurement2)
devtools::install_github("deepankardatta/blandr")
# 🟩 Bland-Altman test ==================================================================================
# install.packages("devtools")
# devtools::install_github("deepankardatta/blandr")
requore(blandr)
# 🟩 Bland-Altman test ==================================================================================
# install.packages("devtools")
# devtools::install_github("deepankardatta/blandr")
require(blandr)
# Perform Bland-Altman analysis and display the statistics
blandr.statistics(measurement1, measurement2)
# Perform Bland-Altman analysis and display the statistics
blandr.statistics(data_combined_2$total_work_area_yb, data_combined_2$total_work_area_digital_ha)
# data
dig = data_combined_2$total_work_area_digital_ha
yb = data_combined_2$total_work_area_yb
# Perform Bland-Altman analysis and display the statistics
blandr.statistics(dig, yb)
# Display a Bland-Altman plot
blandr.display(dig, yb, sig.level = 0.95)
# Perform Bland-Altman analysis
stats <- blandr.statistics(measurement1, measurement2)
# Plot using ggplot2
blandr.plot.ggplot(stats)
# Perform Bland-Altman analysis and display the statistics
stats <- blandr.statistics(dig, yb)
blandr.plot.ggplot(stats)
blandr::blandr.display.and.draw(method1 = dig,
method2 = yb,
method1name = "Digital",
method2name = "YearBook",
sig.level = 0.95,
annotate = T,
ciDisplay = T)
# Plot using ggplot2
blandr.plot.ggplot(stats)
# Bland-Altman 분석 및 outlier 레이블 표시 함수 (벡터 입력용)
bland_altman_with_labels <- function(method1, method2, labels, threshold_factor = 2) {
# Bland-Altman 통계 계산
stats <- blandr.statistics(method1, method2)
# 통계 데이터프레임 생성
data <- data.frame(
means = stats$means,
differences = stats$differences,
labels = labels
)
# 차이의 표준편차 계산
threshold <- threshold_factor * sd(data$differences)
# outliers에 해당하는 점에만 레이블을 표시
data$labels_to_plot <- ifelse(abs(data$differences) > threshold, data$labels, "")
# Bland-Altman plot 생성 및 outliers에 레이블 표시
p <- ggplot(data, aes(x = means, y = differences)) +
geom_point(size = 2) +
geom_hline(yintercept = stats$bias, linetype = "solid", color = "red") +
geom_hline(yintercept = stats$upperLOA, linetype = "dashed", color = "blue") +
geom_hline(yintercept = stats$lowerLOA, linetype = "dashed", color = "blue") +
geom_text(aes(label = labels_to_plot), vjust = -1, size = 3) +  # 유의한 차이가 나는 점에만 레이블 추가
ggtitle("Bland-Altman Plot with Outlier Labels") +
xlab("Mean of Two Methods") +
ylab("Difference Between Two Methods") +
theme_minimal()
# Plot 출력
print(p)
}
data_combined_2$year
labels = paste(data_combined_2$regions,
data_combined_2$forest_tending,
data_combined_2$year,
sep = "_")
labels
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
require(ggplot2)
# Bland-Altman 분석 및 outlier 레이블 표시 함수 (벡터 입력용)
bland_altman_with_labels <- function(method1, method2, labels, threshold_factor = 2) {
require(ggplot2)
# Bland-Altman 통계 계산
stats <- blandr.statistics(method1, method2)
# 통계 데이터프레임 생성
data <- data.frame(
means = stats$means,
differences = stats$differences,
labels = labels
)
# 차이의 표준편차 계산
threshold <- threshold_factor * sd(data$differences)
# outliers에 해당하는 점에만 레이블을 표시
data$labels_to_plot <- ifelse(abs(data$differences) > threshold, data$labels, "")
# Bland-Altman plot 생성 및 outliers에 레이블 표시
p <- ggplot(data, aes(x = means, y = differences)) +
geom_point(size = 2) +
geom_hline(yintercept = stats$bias, linetype = "solid", color = "red") +
geom_hline(yintercept = stats$upperLOA, linetype = "dashed", color = "blue") +
geom_hline(yintercept = stats$lowerLOA, linetype = "dashed", color = "blue") +
geom_text(aes(label = labels_to_plot), vjust = -1, size = 3) +  # 유의한 차이가 나는 점에만 레이블 추가
ggtitle("Bland-Altman Plot with Outlier Labels") +
xlab("Mean of Two Methods") +
ylab("Difference Between Two Methods") +
theme_minimal()
# Plot 출력
print(p)
}
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
# Plot using ggplot2
blandr.plot.ggplot(stats)
# my function
labels = paste(data_combined_2$regions,
data_combined_2$forest_tending,
data_combined_2$year,
sep = "_")
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
# Plot using ggplot2
blandr.plot.ggplot(stats)
# 필요한 패키지 설치 및 로드
install.packages("showtext")
library(showtext)
library(ggplot2)
# 한글 폰트 사용 설정 (예: 나눔고딕)
font_add_google("Nanum Gothic", "nanumgothic")
showtext_auto()
# Bland-Altman 분석 및 신뢰구간 음영 포함한 레이블 표시 함수 (한글 폰트 지원)
bland_altman_with_ci_and_labels <- function(method1, method2, labels, threshold_factor = 2) {
# Bland-Altman 통계 계산
stats <- blandr.statistics(method1, method2)
# 통계 데이터프레임 생성
data <- data.frame(
means = stats$means,
differences = stats$differences,
labels = labels
)
# 차이의 표준편차 계산
threshold <- threshold_factor * sd(data$differences)
# outliers에 해당하는 점에만 레이블을 표시
data$labels_to_plot <- ifelse(abs(data$differences) > threshold, data$labels, "")
# Bland-Altman plot 생성
p <- ggplot(data, aes(x = means, y = differences)) +
geom_point(size = 2) +
# Bias Line 및 신뢰구간 음영
geom_hline(yintercept = stats$bias, linetype = "solid", color = "red") +
geom_ribbon(aes(ymin = stats$biasLowerCI, ymax = stats$biasUpperCI), alpha = 0.2, fill = "red") +
# Upper Limit of Agreement (Upper LoA) 및 신뢰구간 음영
geom_hline(yintercept = stats$upperLOA, linetype = "dashed", color = "blue") +
geom_ribbon(aes(ymin = stats$upperLOA_lowerCI, ymax = stats$upperLOA_upperCI), alpha = 0.2, fill = "blue") +
# Lower Limit of Agreement (Lower LoA) 및 신뢰구간 음영
geom_hline(yintercept = stats$lowerLOA, linetype = "dashed", color = "blue") +
geom_ribbon(aes(ymin = stats$lowerLOA_lowerCI, ymax = stats$lowerLOA_upperCI), alpha = 0.2, fill = "blue") +
# Outlier 레이블 추가
geom_text(aes(label = labels_to_plot), vjust = -1, size = 3, family = "nanumgothic") +  # 한글 폰트 적용
ggtitle("Bland-Altman Plot with Confidence Intervals and Outlier Labels", family = "nanumgothic") +
xlab("Mean of Two Methods") +
ylab("Difference Between Two Methods") +
theme_minimal()
# Plot 출력
print(p)
}
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
# 필요한 패키지 설치 및 로드
install.packages("blandr")
install.packages("ggplot2")
install.packages("showtext")
library(blandr)
library(ggplot2)
library(showtext)
# 한글 폰트 설정
font_add_google("Nanum Gothic", "nanumgothic")
showtext_auto()
# Bland-Altman 분석 및 신뢰구간 음영 포함한 레이블 표시 함수
bland_altman_with_ci_and_labels <- function(method1, method2, labels, threshold_factor = 2, sig.level = 0.95) {
# Bland-Altman 통계 계산
stats <- blandr.statistics(method1, method2, sig.level = sig.level)
# 통계 데이터프레임 생성
data <- data.frame(
means = stats$means,
differences = stats$differences,
labels = labels
)
# 차이의 표준편차 계산
threshold <- threshold_factor * sd(data$differences)
# outliers에 해당하는 점에만 레이블을 표시
data$labels_to_plot <- ifelse(abs(data$differences) > threshold, data$labels, "")
# 신뢰구간 수동 계산
bias <- stats$bias
bias_se <- stats$biasSEM  # Bias의 표준오차
z_value <- qnorm(1 - (1 - sig.level) / 2)  # Z값 계산 (예: 95% 신뢰구간에 해당하는 z값)
# Bias 신뢰구간
bias_upper_ci <- bias + z_value * bias_se
bias_lower_ci <- bias - z_value * bias_se
# Limits of Agreement 신뢰구간 계산
loa_se <- stats$LOA_SEM  # Limits of Agreement의 표준오차
upper_loa_upper_ci <- stats$upperLOA + z_value * loa_se
upper_loa_lower_ci <- stats$upperLOA - z_value * loa_se
lower_loa_upper_ci <- stats$lowerLOA + z_value * loa_se
lower_loa_lower_ci <- stats$lowerLOA - z_value * loa_se
# Bland-Altman plot 생성
p <- ggplot(data, aes(x = means, y = differences)) +
geom_point(size = 2) +
# Bias Line 및 신뢰구간 음영
geom_hline(yintercept = bias, linetype = "solid", color = "red") +
geom_ribbon(aes(ymin = bias_lower_ci, ymax = bias_upper_ci), alpha = 0.2, fill = "red") +
# Upper Limit of Agreement (Upper LoA) 및 신뢰구간 음영
geom_hline(yintercept = stats$upperLOA, linetype = "dashed", color = "blue") +
geom_ribbon(aes(ymin = upper_loa_lower_ci, ymax = upper_loa_upper_ci), alpha = 0.2, fill = "blue") +
# Lower Limit of Agreement (Lower LoA) 및 신뢰구간 음영
geom_hline(yintercept = stats$lowerLOA, linetype = "dashed", color = "blue") +
geom_ribbon(aes(ymin = lower_loa_lower_ci, ymax = lower_loa_upper_ci), alpha = 0.2, fill = "blue") +
# Outlier 레이블 추가
geom_text(aes(label = labels_to_plot), vjust = -1, size = 3, family = "nanumgothic") +  # 한글 폰트 적용
ggtitle("Bland-Altman Plot with Confidence Intervals and Outlier Labels", family = "nanumgothic") +
xlab("Mean of Two Methods") +
ylab("Difference Between Two Methods") +
theme_minimal()
# Plot 출력
print(p)
}
install.packages("ggplot2")
install.packages("showtext")
install.packages("blandr")
install.packages("blandr")
library(blandr)
library(ggplot2)
library(showtext)
# 한글 폰트 설정
font_add_google("Nanum Gothic", "nanumgothic")
showtext_auto()
# Bland-Altman 분석 및 신뢰구간 음영 포함한 레이블 표시 함수
bland_altman_with_ci_and_labels <- function(method1, method2, labels, threshold_factor = 2, sig.level = 0.95) {
# Bland-Altman 통계 계산
stats <- blandr.statistics(method1, method2, sig.level = sig.level)
# 통계 데이터프레임 생성
data <- data.frame(
means = stats$means,
differences = stats$differences,
labels = labels
)
# 차이의 표준편차 계산
threshold <- threshold_factor * sd(data$differences)
# outliers에 해당하는 점에만 레이블을 표시
data$labels_to_plot <- ifelse(abs(data$differences) > threshold, data$labels, "")
# 신뢰구간 수동 계산
bias <- stats$bias
bias_se <- stats$biasSEM  # Bias의 표준오차
z_value <- qnorm(1 - (1 - sig.level) / 2)  # Z값 계산 (예: 95% 신뢰구간에 해당하는 z값)
# Bias 신뢰구간
bias_upper_ci <- bias + z_value * bias_se
bias_lower_ci <- bias - z_value * bias_se
# Limits of Agreement 신뢰구간 계산
loa_se <- stats$LOA_SEM  # Limits of Agreement의 표준오차
upper_loa_upper_ci <- stats$upperLOA + z_value * loa_se
upper_loa_lower_ci <- stats$upperLOA - z_value * loa_se
lower_loa_upper_ci <- stats$lowerLOA + z_value * loa_se
lower_loa_lower_ci <- stats$lowerLOA - z_value * loa_se
# Bland-Altman plot 생성
p <- ggplot(data, aes(x = means, y = differences)) +
geom_point(size = 2) +
# Bias Line 및 신뢰구간 음영
geom_hline(yintercept = bias, linetype = "solid", color = "red") +
geom_ribbon(aes(ymin = bias_lower_ci, ymax = bias_upper_ci), alpha = 0.2, fill = "red") +
# Upper Limit of Agreement (Upper LoA) 및 신뢰구간 음영
geom_hline(yintercept = stats$upperLOA, linetype = "dashed", color = "blue") +
geom_ribbon(aes(ymin = upper_loa_lower_ci, ymax = upper_loa_upper_ci), alpha = 0.2, fill = "blue") +
# Lower Limit of Agreement (Lower LoA) 및 신뢰구간 음영
geom_hline(yintercept = stats$lowerLOA, linetype = "dashed", color = "blue") +
geom_ribbon(aes(ymin = lower_loa_lower_ci, ymax = lower_loa_upper_ci), alpha = 0.2, fill = "blue") +
# Outlier 레이블 추가
geom_text(aes(label = labels_to_plot), vjust = -1, size = 3, family = "nanumgothic") +  # 한글 폰트 적용
ggtitle("Bland-Altman Plot with Confidence Intervals and Outlier Labels", family = "nanumgothic") +
xlab("Mean of Two Methods") +
ylab("Difference Between Two Methods") +
theme_minimal()
# Plot 출력
print(p)
}
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
bland_altman_with_labels(method1 = dig,
method2 = yb,
labels = labels)
