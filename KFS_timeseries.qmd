---
title: "Time-serise data analysis (산림청)"
format: html
editor: visual
toc: TRUE
toc-depth: 5
toc-expand: 3
output:
  html_document:
    fig_width: 15  # 적절한 폭으로 조정
---

# 🟥Preliminary setting (hidden)

```{r, echo = FALSE, message=FALSE, warning=FALSE}
path_save = "/Users/Ido/Library/CloudStorage/Dropbox/@DataAnalysis/✴️DataAnalysis___KFS_Timeseries/Results"
path_image = "/Users/Ido/Library/CloudStorage/Dropbox/@DataAnalysis/✴️DataAnalysis___KFS_Timeseries/Results/images"

Results = readRDS(paste0(path_save, "/1.Timeseries_plots.rds"))


```

```{r, echo=F}

# 🟥 Load Functions & Packages ##########################################################################
## 🟨Install and loading Packages ================================
install_packages = function(packages, load=TRUE) {
  # load : load the packages after installation?
  for(pkg in packages) {
    if (!require(pkg, character.only = TRUE)) {
      install.packages(pkg)
    }
    
    if(load){
      library(pkg, character.only = TRUE, quietly = TRUE)
    }
  }
}

List.list = list()
List.list[[1]] = visual = c("ggpubr", "ggplot2", "ggstatsplot", "ggsignif", "rlang", "RColorBrewer")
List.list[[2]] = stat = c("fda", "MASS")
List.list[[3]] = data_handling = c("tidyverse", "dplyr", "clipr", "tidyr", "readr", "caret", "readxl")
List.list[[4]] = qmd = c("janitor", "knitr")
List.list[[5]] = texts = c("stringr")
List.list[[6]] = misc = c("devtools")
List.list[[7]] = db = c("RMySQL", "DBI", "odbc", "RSQL", "RSQLite")
List.list[[8]] = sampling = c("rsample")

packages_to_install_and_load = unlist(List.list)
install_packages(packages_to_install_and_load)



## 🟨Loading my functions ======================================================
# Check my OS
os <- Sys.info()["sysname"]
if(os ==  "Darwin"){
  
  path_OS = "/Users/Ido" # mac
  
}else if(os ==  "Window"){
  
  path_OS = "C:/Users/lleii"  
  
}
path_Dropbox = paste0(path_OS, "/Dropbox")
path_GitHub = list.files(path_Dropbox, pattern = "GitHub", full.names = T)
path_GitHub_Code = paste0(path_GitHub, "/GitHub___Code")
Rpkgs = c("ADNIprep", "StatsR", "refineR", "dimR")
Load = sapply(Rpkgs, function(y){
  list.files(path = path_GitHub_Code, pattern = y, full.names = T) %>% 
    paste0(., "/", y,"/R") %>% 
    list.files(., full.names = T) %>% 
    purrr::walk(source)
})

```

# 🟥 영어 용어 정리

-   Total: 계

-   Transactional: 거래형

-   Nontransactional: 비거래형

-   Afforestation: 신규조림

-   Reforestation: 재조림

-   Extended cutting cycle: 벌기령연장

-   Species conversion: 수종갱신

-   Use of forest biomass for energy: 산림바이오매스 에너지 이용

-   Vegetation restoration: 식생복구

# 🟥Time-series Plots

## 🟧참고 사항

-   NA인 경우는 0으로 간주

## 🟧Each Variable

```{r, echo=F}
i=1
ith_results = Results[[i]]

```

### 🟨 Total

-   Total = Transactional + Nontransactional

```{r, echo=F}
j=1
jth_results = ith_results[[j]]
```

#### 🟩 Afforestation

```{r, echo=F}
k=1
print(jth_results[[k]])
```

#### 🟩 Reforestation

```{r, echo=FALSE}
k = 2 # Reforestation에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Extended cutting cycle

```{r, echo=FALSE}
k = 3 # Extended cutting cycle에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Species conversion

```{r, echo=FALSE}
k = 4 # Species conversion에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Use of forest biomass for energy

```{r, echo=FALSE}
k = 5 # Use of forest biomass for energy에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Vegetation restoration

```{r, echo=FALSE}
k = 6 # Vegetation restoration에 해당하는 플롯
print(jth_results[[k]])
```

### 🟨 Transactional

```{r, echo=F}
j=2
jth_results = ith_results[[j]]
```

#### 🟩 Afforestation

```{r, echo=F}
k=1
print(jth_results[[k]])
```

#### 🟩 Reforestation

```{r, echo=FALSE}
k = 2 # Reforestation에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Extended cutting cycle

```{r, echo=FALSE}
k = 3 # Extended cutting cycle에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Species conversion

```{r, echo=FALSE}
k = 4 # Species conversion에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Use of forest biomass for energy

```{r, echo=FALSE}
k = 5 # Use of forest biomass for energy에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Vegetation restoration

```{r, echo=FALSE}
k = 6 # Vegetation restoration에 해당하는 플롯
print(jth_results[[k]])
```

### 🟨 NonTransactional

```{r, echo=F}
j=3
jth_results = ith_results[[j]]
```

#### 🟩 Afforestation

```{r, echo=F}
k=1
print(jth_results[[k]])
```

#### 🟩 Reforestation

```{r, echo=FALSE}
k = 2 # Reforestation에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Extended cutting cycle

```{r, echo=FALSE}
k = 3 # Extended cutting cycle에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Species conversion

```{r, echo=FALSE}
k = 4 # Species conversion에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Use of forest biomass for energy

```{r, echo=FALSE}
k = 5 # Use of forest biomass for energy에 해당하는 플롯
print(jth_results[[k]])
```

#### 🟩 Vegetation restoration

```{r, echo=FALSE}
k = 6 # Vegetation restoration에 해당하는 플롯
print(jth_results[[k]])
```

## 🟧All Variable

```{r, echo=F}
i=2
ith_results = Results[[i]]
```

### 🟨 Total

-   Total = Transactional + Nontransactional

```{r, echo=F}
j=1
print(ith_results[[j]])
```

### 🟨 Transactional

```{r, echo=F}
j=2
print(ith_results[[j]])
```

### 🟨 NonTransactional

```{r, echo=F}
j=3
print(ith_results[[j]])
```

## 🟧Summed results

```{r, echo=F}
i=3
ith_results = Results[[i]]
```

-   각 변수에 대한 모든 연도의 값을 합한 결과입니다.

    -   Total: 계

    -   Transactional: 거래형

    -   Nontransactional: 비거래형

-   하나의 값이 너무 커서 log 변환한 플롯을 추가.

    -   플롯 위의 값은 두 경우 모두 original값을 사용.

### 🟨 Total

```{r, echo=F}
j=1
jth_results = ith_results[[j]]

```

#### 🟩 Original

```{r, echo=F}
k=1
print(jth_results[[k]])
```

#### 🟩 Log transformation

```{r, echo=FALSE}
k = 2 # Reforestation에 해당하는 플롯
print(jth_results[[k]])
```

### 🟨 Transactional

```{r, echo=F}
j=2
jth_results = ith_results[[j]]

```

#### 🟩 Original

```{r, echo=F}
k=1
print(jth_results[[k]])
```

#### 🟩 Log transformation

```{r, echo=FALSE}
k = 2 # Reforestation에 해당하는 플롯
print(jth_results[[k]])
```

### 🟨 Nontransactional

```{r, echo=F}
j=3
jth_results = ith_results[[j]]

```

#### 🟩 Original

```{r, echo=F}
k=1
print(jth_results[[k]])
```

#### 🟩 Log transformation

```{r, echo=FALSE}
k = 2 # Reforestation에 해당하는 플롯
print(jth_results[[k]])
```
